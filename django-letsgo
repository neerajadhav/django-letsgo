#!/bin/bash

while getopts p:ah options; do
	case $options in
		p) letsgo=$OPTARG;;
		a) startauthapp=1;;
        h) help=1;;
        *) help=1;;
	esac
done

help (){
    echo -e "
    
    django-letsgo -p <projectname>
    
    flags:
     -p <projectname> : Start a django project with the name <projectname>
     -a               : Start the authapp with working login and register pages
     -h               : Show this help
    "
}

letsgo (){
folder=$1
if [[ -d "$folder" ]]; then
    while [[ -d "$folder" ]]; do
    read -p 'Folder already exists, try another name: ' folder
    done
    printf '\nCreating folder '$folder''
    mkdir $folder
    printf '\nEntering '$folder' folder\n'
    cd $folder
else
    printf '\nCreating folder '$folder''
    mkdir $folder
    printf '\nEntering '$folder' folder\n'
    cd $folder
fi

# create vitual env and activate it
printf '\nCreating and activating virtual enviroment (venv)\n'
if [[ -d "$folder-env" ]]; then
    printf '\nVirtual enviroment already exists'
    printf '\nActivating virtual enviroment'
    source $folder-env/Scripts/activate
else
    printf '\nCreating virtual enviroment'
    python -m venv $folder-env
    printf '\nActivating virtual enviroment'
    source $folder-env/Scripts/activate
fi

# update pip
printf '\n# Upgrading pip to latest version \n'
python -m pip install --upgrade pip

# install django
printf '\n# Installing django and other requirements\n'
pip install django

pip freeze
pip freeze > requirements.txt

# django startproject base
printf '\n# Starting django project (base)'
django-admin startproject base .
printf '\n# Done\n'

# django startapp $name_of_app
printf '\n\n'
read -p 'Enter name of app: ' app
while [[ $app = "" ]]; do
   read -p 'App_name cannot be empty, Enter name of app: ' app
done
python manage.py startapp $app

# output 
ls

printf '\n**************************** Writing to files **************************\n'

# base/settings.py
me=$(</dev/urandom tr -dc 'A-Za-z0-9!#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' | head -c 50)

cat > base/settings.py << _EOF_
"""
Django settings for base project.

Generated by 'django-admin startproject' using Django 4.0.1. and django-letsgo 1.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "$me"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    '$app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'base.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'base.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
_EOF_

printf '\n created base/settings.py\n'

# app/urls.py
cat > $app/urls.py << _EOF_
from django.urls import path
from $app import views

urlpatterns = [
    path('', views.home, name='home'),
]
_EOF_

printf '\n created '$app'/urls.py\n'

# base.urls.py
cat > base/urls.py << _EOF_
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('$app.urls'))
]
_EOF_

printf '\n created base/urls.py\n'

# app/views.py
cat > $app/views.py << _EOF_
from django.shortcuts import render

def home(request):
    return render(request, 'home.html', {})

_EOF_

printf '\n created '$app'/views.py\n'


# templates/home.html
cd $app
mkdir templates
cat > templates/home.html << _EOF_
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Home</title>
    <link rel="stylesheet" href="{% static 'css/main.css' %}">
</head>
<body>
    <h2>Home</h2>
</body>
</html>
_EOF_

printf '\n created '$app'/templates/home.html\n'

cd ..

mkdir --verbose static static/css static/images static/js
touch static/css/main.css static/js/script.js

}

startauthapp (){
	
# startauthapp
python manage.py startapp authapp

# connect app and project
sed -i "s/INSTALLED_APPS = \[/INSTALLED_APPS = \[\n    'authapp',/" base/settings.py
sed -i "s/path('admin\/', admin.site.urls),/path('admin\/', admin.site.urls),\n    path('', include('authapp.urls')),/" base/urls.py

# create template folder
mkdir -p authapp/templates/authapp

# create templates
touch authapp/templates/authapp/login.html authapp/templates/authapp/register.html

# create forms and urls
touch authapp/forms.py authapp/urls.py

# edit files

# forms.py
cat > authapp/forms.py << _EOF_
from django.contrib.auth.forms import UserCreationForm
from django import forms
from django.contrib.auth.models import User

class CreateUserForm(UserCreationForm):
    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']
_EOF_

# urls.py
cat > authapp/urls.py << _EOF_
from django.urls import path, include
from . import views

urlpatterns = [
    path('login/', views.login, name='login'),
    path('logout/', views.logoutUser, name='logout'),
    path('register/', views.register, name='register'),
]
_EOF_

# views.py
cat > authapp/views.py << _EOF_
from django.shortcuts import render, redirect
from .forms import CreateUserForm
from django.contrib import messages
from django.contrib.auth import authenticate, login as lgin, logout

def login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            lgin(request, user)
            return redirect("home")
        else:
            messages.info(request, 'Username or password is incorrect')
            return render(request, 'authapp/login.html')
    context = {}
    return render(request, 'authapp/login.html', context)

def logoutUser(request):
    logout(request)
    return redirect('login')

def register(request):
    form = CreateUserForm()
    if request.method == 'POST':
        form = CreateUserForm(request.POST)
        if form.is_valid():
            form.save()
            user = form.cleaned_data.get('username')
            messages.success(request, 'Account created successfully for ' + user)

            return redirect('login')
    context = {
        'form': form
    }
    return render(request, 'authapp/register.html', context)
_EOF_

# login.html
cat > authapp/templates/authapp/login.html << _EOF_
<h1>Login</h1>
{% for message in messages %}
    <p>{{ message }}</p>
{% endfor %}

<form action="" method="post">
    {% csrf_token %}
    <label for="username">Username:</label>
    <input type="text" name="username" id="username" value="{{ username }}" />
    <label for="password">Password:</label>
    <input type="password" name="password" id="password" />
    <input type="submit" value="Login" />
</form>
_EOF_

# register.html
cat > authapp/templates/authapp/register.html << _EOF_
<h1>Register</h1>
<form action="" method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Register">
</form>
_EOF_

}

if [[ $help -eq 1 ]];then
help
else
    emptycheck=$letsgo
    if [[ $emptycheck = "" ]]; then
        while [[ $emptycheck = "" ]]; do
            read -p 'Name of folder cant be blank. Enter name of folder: ' emptycheck
            letsgo $emptycheck
        done
    else
        letsgo $emptycheck
    fi
    
    if [[ $startauthapp -eq 1 ]];then
    startauthapp $var
    fi

    printf "\n ----------- starting server -------------\n\n"
    python manage.py makemigrations
    python manage.py migrate
    python manage.py runserver
fi